# .github/workflows/postman-sync.yml
name: "Postman - Publish"
on:
  push:
    branches: [ main ]

jobs:
  publish-to-postman:
    runs-on: ubuntu-latest
    env:
      # Vars already added to github secrets
      POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
      POSTMAN_WORKSPACE_ID: ${{ secrets.POSTMAN_WORKSPACE_ID }}
      POSTMAN_COLLECTION_ID_API: ${{ secrets.POSTMAN_COLLECTION_ID_API }}
      POSTMAN_COLLECTION_ID_TESTS: ${{ secrets.POSTMAN_COLLECTION_ID_TESTS }}
      POSTMAN_ENV_ID_LOCAL: ${{ secrets.POSTMAN_ENV_ID_LOCAL }}

      # Paths to local artifacts (collections and environments)
      COLL_API_PATH: postman/collections/api.postman_collection.json
      COLL_TESTS_PATH: postman/collections/tests.postman_collection.json
      ENV_LOCAL_PATH: postman/environments/local.postman_environment.json
      # TODO: Implement the spec flow as well
      OPENAPI_SPEC_PATH: postman/specs/accounts-openapi.yaml

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # --- Debug ---
        # TODO: Debug should just check if all the files are there and not empty
      - name: Debug - Check files and jq version
        run: |
          echo "=== jq version ==="
          jq --version
          echo "=== File exists and size ==="
          ls -lh "$COLL_API_PATH"
          echo "=== First 10 lines of file ==="
          head -n 10 "$COLL_API_PATH"
          echo "=== Test jq parse ==="
          jq . "$COLL_API_PATH" | head -n 5 || echo "jq parse failed"
          echo "=== Test jq transformation ==="
          jq '{collection: .}' "$COLL_API_PATH" | head -n 5 || echo "jq transformation failed"

      # --- Collections ---
      - name: Update API collection
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Step 1: Transform collection with jq ==="
          jq '{collection: .}' "$COLL_API_PATH" > /tmp/collection_api.json
          echo "✓ Transformation successful. Output size: $(wc -c < /tmp/collection_api.json) bytes"
          
          echo "=== Step 2: Send to Postman API ==="
          HTTP_RESPONSE=$(curl -w "\n%{http_code}" -X PUT \
            "https://api.getpostman-beta.com/collections/${POSTMAN_COLLECTION_ID_API}" \
            -H "X-Api-Key: ${POSTMAN_API_KEY}" \
            -H "Content-Type: application/json" \
            --data @/tmp/collection_api.json)
          
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | head -n -1)
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n 1)
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body:"
          echo "$HTTP_BODY" | jq . || echo "$HTTP_BODY"
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            COLLECTION_NAME=$(echo "$HTTP_BODY" | jq -r '.collection.info.name')
            echo "✓ Successfully updated collection: $COLLECTION_NAME"
          else
            echo "✗ Failed to update collection"
            exit 1
          fi

      - name: Update Tests collection
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Step 1: Transform tests collection with jq ==="
          jq '{collection: .}' "$COLL_TESTS_PATH" > /tmp/collection_tests.json
          echo "✓ Transformation successful. Output size: $(wc -c < /tmp/collection_tests.json) bytes"
          
          echo "=== Step 2: Send to Postman API ==="
          HTTP_RESPONSE=$(curl -w "\n%{http_code}" -X PUT \
            "https://api.getpostman-beta.com/collections/${POSTMAN_COLLECTION_ID_TESTS}" \
            -H "X-Api-Key: ${POSTMAN_API_KEY}" \
            -H "Content-Type: application/json" \
            --data @/tmp/collection_tests.json)
          
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | head -n -1)
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n 1)
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body:"
          echo "$HTTP_BODY" | jq . || echo "$HTTP_BODY"
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            COLLECTION_NAME=$(echo "$HTTP_BODY" | jq -r '.collection.info.name')
            echo "✓ Successfully updated collection: $COLLECTION_NAME"
          else
            echo "✗ Failed to update tests collection"
            exit 1
          fi

      # --- Environment ---
      - name: Update Local environment
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Step 1: Transform environment with jq ==="
          jq '{environment: .}' "$ENV_LOCAL_PATH" > /tmp/env_local.json
          echo "✓ Transformation successful. Output size: $(wc -c < /tmp/env_local.json) bytes"
          
          echo "=== Step 2: Send to Postman API ==="
          HTTP_RESPONSE=$(curl -w "\n%{http_code}" -X PUT \
            "https://api.getpostman-beta.com/environments/${POSTMAN_ENV_ID_LOCAL}" \
            -H "X-Api-Key: ${POSTMAN_API_KEY}" \
            -H "Content-Type: application/json" \
            --data @/tmp/env_local.json)
          
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | head -n -1)
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n 1)
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body:"
          echo "$HTTP_BODY" | jq . || echo "$HTTP_BODY"
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            ENV_NAME=$(echo "$HTTP_BODY" | jq -r '.environment.name')
            echo "✓ Successfully updated environment: $ENV_NAME"
          else
            echo "✗ Failed to update environment"
            exit 1
          fi

      # --- (Optional) Verify workspace contents ---
      - name: List workspace collections (optional)
        run: |
          echo "=== Verifying workspace contents ==="
          WORKSPACE_RESPONSE=$(curl -s -X GET \
            "https://api.getpostman-beta.com/workspaces/${POSTMAN_WORKSPACE_ID}" \
            -H "X-Api-Key: ${POSTMAN_API_KEY}")
          
          echo "Collections in workspace:"
          echo "$WORKSPACE_RESPONSE" | jq -r '.workspace.collections[]?.name' || echo "Failed to list collections"
          
          echo ""
          echo "Environments in workspace:"
          echo "$WORKSPACE_RESPONSE" | jq -r '.workspace.environments[]?.name' || echo "Failed to list environments"