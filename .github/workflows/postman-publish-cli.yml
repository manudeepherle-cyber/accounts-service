name: Postman beta push to cloud

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  postman-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
          clean: true
          ref: ${{ github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server in background
        run: |
          npm start &
          echo "SERVER_PID=$!" >> $GITHUB_ENV
          echo "Started server with PID $!"

      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3000/health >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "Server is ready!"
              exit 0
            fi
            echo "Attempt $i: Server not ready yet..."
            sleep 2
          done
          echo "Server failed to start in time"
          exit 1

      # - name: Install Postman CLI
      #   run: curl -o- "https://dl-cli.pstmn-beta.io/install/unix.sh" | sh
      - name: Install Postman CLI
        run: |
          echo "Downloading Postman CLI installer..."
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
            
            # Download with proper headers to avoid Cloudflare blocking
            HTTP_CODE=$(curl -sS -w "%{http_code}" -o /tmp/install-postman.sh \
              -A "Mozilla/5.0 (compatible; GitHub-Actions)" \
              -H "Accept: text/x-shellscript, */*" \
              "https://dl-cli.pstmn-beta.io/install/unix.sh")
            
            echo "HTTP Status: $HTTP_CODE"
            
            # Check if we got a 200 and it's a valid shell script
            if [ "$HTTP_CODE" = "200" ] && head -1 /tmp/install-postman.sh 2>/dev/null | grep -q "^#!/bin/sh"; then
              echo "âœ“ Valid shell script downloaded"
              sh /tmp/install-postman.sh
              exit 0
            else
              echo "âœ— Invalid response (got HTML or error)"
              if [ -f /tmp/install-postman.sh ]; then
                echo "First 5 lines of downloaded file:"
                head -5 /tmp/install-postman.sh
              fi
              
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                WAIT_TIME=$((ATTEMPT * 3))
                echo "Waiting ${WAIT_TIME}s before retry..."
                sleep $WAIT_TIME
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          echo "Failed to download Postman CLI after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Verify Postman CLI version
        run: postman --version

      - name: Login to Postman
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: postman login --with-api-key "$POSTMAN_API_KEY"

      # 1) Run tests locally from repo files (fail fast)
      - name: Run Postman tests (local)
        run: |
          postman collection run postman/collections/tests.postman_collection.json \
            -e postman/environments/local.postman_environment.json \
            --bail \
            --color on \
            --reporter-cli-show-timestamps \
            --reporter-json-export test-results.json
      
      - name: Display test results summary
        if: always()
        run: |
          if [ -f test-results.json ]; then
            echo "ðŸ“Š Test Results Summary:"
            echo "======================="
            jq -r '
              "Total Requests: " + (.run.stats.requests.total | tostring) + "\n" +
              "Passed Requests: " + ((.run.stats.requests.total - .run.stats.requests.failed) | tostring) + "\n" +
              "Failed Requests: " + (.run.stats.requests.failed | tostring) + "\n" +
              "Total Assertions: " + (.run.stats.assertions.total | tostring) + "\n" +
              "Passed Assertions: " + ((.run.stats.assertions.total - .run.stats.assertions.failed) | tostring) + "\n" +
              "Failed Assertions: " + (.run.stats.assertions.failed | tostring)
            ' test-results.json
          fi
      
      - name: Push workspace to Postman
        run: postman workspace push -y

      - name: Stop server
        if: always()
        run: |
          if [ -n "$SERVER_PID" ]; then
            echo "Stopping server (PID: $SERVER_PID)..."
            kill $SERVER_PID || true
          else
            echo "No server PID found, attempting to kill by port..."
            pkill -f "node dist/index.js" || true
          fi