{
  "info": {
    "name": "RBC Accounts E2E Tests",
    "description": "End-to-end test scenarios for complete workflows in the RBC Accounts API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "rbc-accounts-e2e",
    "version": "1.0.0"
  },
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "X-API-Key",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "E2E: Complete Transfer Workflow",
      "item": [
        {
          "name": "1. List Accounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('At least 2 accounts exist', function () {",
                  "    pm.expect(jsonData.data.length).to.be.at.least(2);",
                  "});",
                  "",
                  "// Store account IDs and initial balances",
                  "if (jsonData.data && jsonData.data.length >= 2) {",
                  "    pm.environment.set('e2e_from_account', jsonData.data[0].id);",
                  "    pm.environment.set('e2e_to_account', jsonData.data[1].id);",
                  "    pm.environment.set('e2e_from_initial_balance', jsonData.data[0].balance);",
                  "    pm.environment.set('e2e_to_initial_balance', jsonData.data[1].balance);",
                  "    pm.environment.set('e2e_transfer_amount', 100.00);",
                  "    ",
                  "    console.log('Transfer Setup:');",
                  "    console.log('From:', jsonData.data[0].id, 'Balance:', jsonData.data[0].balance);",
                  "    console.log('To:', jsonData.data[1].id, 'Balance:', jsonData.data[1].balance);",
                  "    console.log('Amount:', 100.00);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "Get accounts and store initial balances"
          },
          "response": []
        },
        {
          "name": "2. Get Source Account Balance (Before)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const initialBalance = parseFloat(pm.environment.get('e2e_from_initial_balance'));",
                  "",
                  "pm.test('Balance matches initial value', function () {",
                  "    pm.expect(jsonData.data.balance).to.eql(initialBalance);",
                  "});",
                  "",
                  "console.log('Source account balance before transfer:', jsonData.data.balance);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_from_account}}/balance",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_from_account}}", "balance"]
            },
            "description": "Verify source account balance before transfer"
          },
          "response": []
        },
        {
          "name": "3. Get Destination Account Balance (Before)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const initialBalance = parseFloat(pm.environment.get('e2e_to_initial_balance'));",
                  "",
                  "pm.test('Balance matches initial value', function () {",
                  "    pm.expect(jsonData.data.balance).to.eql(initialBalance);",
                  "});",
                  "",
                  "console.log('Destination account balance before transfer:', jsonData.data.balance);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_to_account}}/balance",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_to_account}}", "balance"]
            },
            "description": "Verify destination account balance before transfer"
          },
          "response": []
        },
        {
          "name": "4. Create Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Transfer created successfully', function () {",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data.status).to.eql('queued');",
                  "});",
                  "",
                  "pm.test('Transfer details are correct', function () {",
                  "    const transferAmount = parseFloat(pm.environment.get('e2e_transfer_amount'));",
                  "    pm.expect(jsonData.data.amount).to.eql(transferAmount);",
                  "    pm.expect(jsonData.data.fromAccountId).to.eql(pm.environment.get('e2e_from_account'));",
                  "    pm.expect(jsonData.data.toAccountId).to.eql(pm.environment.get('e2e_to_account'));",
                  "});",
                  "",
                  "// Store transfer ID",
                  "pm.environment.set('e2e_transfer_id', jsonData.data.id);",
                  "console.log('Transfer created:', jsonData.data.id, 'Status:', jsonData.data.status);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromAccountId\": \"{{e2e_from_account}}\",\n  \"toAccountId\": \"{{e2e_to_account}}\",\n  \"amount\": {{e2e_transfer_amount}},\n  \"description\": \"E2E Test Transfer\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/transfers",
              "host": ["{{base_url}}"],
              "path": ["transfers"]
            },
            "description": "Create the transfer"
          },
          "response": []
        },
        {
          "name": "5. Wait for Processing",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Wait 2 seconds for transfer to process",
                  "setTimeout(function(){}, 2000);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This is just a placeholder to allow the delay",
                  "pm.test('Waiting for transfer to process', function () {",
                  "    pm.expect(true).to.be.true;",
                  "});",
                  "",
                  "console.log('Waited 2 seconds for transfer processing...');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Dummy request to allow time for processing"
          },
          "response": []
        },
        {
          "name": "6. Check Transfer Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Transfer is processed', function () {",
                  "    pm.expect(jsonData.data.status).to.eql('processed');",
                  "    pm.expect(jsonData.data).to.have.property('processedAt');",
                  "});",
                  "",
                  "pm.test('Transfer ID matches', function () {",
                  "    pm.expect(jsonData.data.transferId).to.eql(pm.environment.get('e2e_transfer_id'));",
                  "});",
                  "",
                  "console.log('Transfer status:', jsonData.data.status);",
                  "console.log('Processed at:', jsonData.data.processedAt);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/transfers/{{e2e_transfer_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["transfers", "{{e2e_transfer_id}}", "status"]
            },
            "description": "Verify transfer is processed"
          },
          "response": []
        },
        {
          "name": "7. Verify Source Account Balance (After)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const initialBalance = parseFloat(pm.environment.get('e2e_from_initial_balance'));",
                  "const transferAmount = parseFloat(pm.environment.get('e2e_transfer_amount'));",
                  "const expectedBalance = initialBalance - transferAmount;",
                  "",
                  "pm.test('Balance decreased by transfer amount', function () {",
                  "    pm.expect(jsonData.data.balance).to.eql(expectedBalance);",
                  "});",
                  "",
                  "console.log('Source account balance after transfer:', jsonData.data.balance);",
                  "console.log('Expected balance:', expectedBalance);",
                  "console.log('Difference:', initialBalance - jsonData.data.balance);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_from_account}}/balance",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_from_account}}", "balance"]
            },
            "description": "Verify source account balance decreased"
          },
          "response": []
        },
        {
          "name": "8. Verify Destination Account Balance (After)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const initialBalance = parseFloat(pm.environment.get('e2e_to_initial_balance'));",
                  "const transferAmount = parseFloat(pm.environment.get('e2e_transfer_amount'));",
                  "const expectedBalance = initialBalance + transferAmount;",
                  "",
                  "pm.test('Balance increased by transfer amount', function () {",
                  "    pm.expect(jsonData.data.balance).to.eql(expectedBalance);",
                  "});",
                  "",
                  "console.log('Destination account balance after transfer:', jsonData.data.balance);",
                  "console.log('Expected balance:', expectedBalance);",
                  "console.log('Difference:', jsonData.data.balance - initialBalance);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_to_account}}/balance",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_to_account}}", "balance"]
            },
            "description": "Verify destination account balance increased"
          },
          "response": []
        },
        {
          "name": "9. Verify Transactions Created",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const transferId = pm.environment.get('e2e_transfer_id');",
                  "",
                  "pm.test('Transfer transactions exist', function () {",
                  "    const transferTxns = jsonData.data.filter(txn => ",
                  "        txn.type === 'transfer' && ",
                  "        txn.metadata && ",
                  "        txn.metadata.transferId === transferId",
                  "    );",
                  "    pm.expect(transferTxns.length).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test('Transfer transaction has correct amount', function () {",
                  "    const transferAmount = parseFloat(pm.environment.get('e2e_transfer_amount'));",
                  "    const transferTxns = jsonData.data.filter(txn => ",
                  "        txn.type === 'transfer' && ",
                  "        txn.metadata && ",
                  "        txn.metadata.transferId === transferId",
                  "    );",
                  "    if (transferTxns.length > 0) {",
                  "        pm.expect(transferTxns[0].amount).to.eql(transferAmount);",
                  "    }",
                  "});",
                  "",
                  "console.log('Transfer transactions found:', jsonData.data.filter(txn => txn.type === 'transfer').length);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_from_account}}/transactions",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_from_account}}", "transactions"]
            },
            "description": "Verify transfer created transactions"
          },
          "response": []
        }
      ],
      "description": "Complete end-to-end test of transfer creation, processing, and balance verification"
    },
    {
      "name": "E2E: Account Query Workflow",
      "item": [
        {
          "name": "1. Get All Accounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Multiple accounts exist', function () {",
                  "    pm.expect(jsonData.data.length).to.be.at.least(1);",
                  "});",
                  "",
                  "// Store first account for detailed queries",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.environment.set('e2e_query_account', jsonData.data[0].id);",
                  "    console.log('Testing with account:', jsonData.data[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            }
          },
          "response": []
        },
        {
          "name": "2. Get Account Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Account details are complete', function () {",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('accountNumber');",
                  "    pm.expect(jsonData.data).to.have.property('customerName');",
                  "    pm.expect(jsonData.data).to.have.property('balance');",
                  "    pm.expect(jsonData.data).to.have.property('status');",
                  "});",
                  "",
                  "pm.environment.set('e2e_query_balance', jsonData.data.balance);",
                  "console.log('Account balance:', jsonData.data.balance);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_query_account}}",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_query_account}}"]
            }
          },
          "response": []
        },
        {
          "name": "3. Get Balance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const accountBalance = parseFloat(pm.environment.get('e2e_query_balance'));",
                  "",
                  "pm.test('Balance matches account data', function () {",
                  "    pm.expect(jsonData.data.balance).to.eql(accountBalance);",
                  "});",
                  "",
                  "console.log('Balance endpoint returned:', jsonData.data.balance);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_query_account}}/balance",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_query_account}}", "balance"]
            }
          },
          "response": []
        },
        {
          "name": "4. Get All Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Transactions returned', function () {",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "if (jsonData.data.length > 0) {",
                  "    pm.environment.set('e2e_query_txn', jsonData.data[0].id);",
                  "    console.log('Total transactions:', jsonData.data.length);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_query_account}}/transactions",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_query_account}}", "transactions"]
            }
          },
          "response": []
        },
        {
          "name": "5. Get Specific Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Transaction details are complete', function () {",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('type');",
                  "    pm.expect(jsonData.data).to.have.property('amount');",
                  "    pm.expect(jsonData.data).to.have.property('description');",
                  "});",
                  "",
                  "console.log('Transaction type:', jsonData.data.type, 'Amount:', jsonData.data.amount);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/transactions/{{e2e_query_txn}}",
              "host": ["{{base_url}}"],
              "path": ["transactions", "{{e2e_query_txn}}"]
            }
          },
          "response": []
        },
        {
          "name": "6. Filter Transactions by Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('All transactions are credit type', function () {",
                  "    jsonData.data.forEach(txn => {",
                  "        pm.expect(txn.type).to.eql('credit');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Filter applied correctly', function () {",
                  "    pm.expect(jsonData.filters.type).to.eql('credit');",
                  "});",
                  "",
                  "console.log('Credit transactions:', jsonData.data.length);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{e2e_query_account}}/transactions?type=credit",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{e2e_query_account}}", "transactions"],
              "query": [
                {
                  "key": "type",
                  "value": "credit"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "End-to-end test of account and transaction query workflows"
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}

