openapi: 3.1.0
info:
  title: Accounts API
  version: 1.0.0
  description: Accounts API OpenAPI spec file.
servers:
  - url: "{protocol}://{host}:{port}"
    variables:
      protocol:
        default: http
        enum: [http, https]
      host:
        default: localhost
      port:
        default: "3000"
tags:
  - name: Health
  - name: Accounts
  - name: Transactions
  - name: Transfers

paths:
  /health:
    get:
      tags: [Health]
      summary: Health Check
      description: Check if the service is running and healthy.
      operationId: getHealth
      parameters:
        - name: dummy
          in: query
          required: false
          description: No-op parameter used in sample request.
          schema: { type: string }
      responses:
        "200":
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }

  /accounts:
    get:
      tags: [Accounts]
      summary: List All Accounts
      description: Retrieve a list of all bank accounts.
      operationId: listAccounts
      responses:
        "200":
          description: List of accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"

  /accounts/{id}:
    get:
      tags: [Accounts]
      summary: Get Account by ID
      description: Retrieve detailed information about a specific account.
      operationId: getAccount
      parameters:
        - $ref: "#/components/parameters/AccountId"
      responses:
        "200":
          description: Account details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "404":
          description: Account not found.

  /accounts/{id}/balance:
    get:
      tags: [Accounts]
      summary: Get Account Balance
      description: Retrieve the current balance of a specific account.
      operationId: getAccountBalance
      parameters:
        - $ref: "#/components/parameters/AccountId"
      responses:
        "200":
          description: Current balance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalance"

  /accounts/{id}/transactions:
    get:
      tags: [Accounts]
      summary: Get Account Transactions
      description: Retrieve transaction history for a specific account with optional filters.
      operationId: getAccountTransactions
      parameters:
        - $ref: "#/components/parameters/AccountId"
        - name: from
          in: query
          description: Start date (ISO 8601).
          required: false
          schema: { type: string, format: date }
        - name: to
          in: query
          description: End date (ISO 8601).
          required: false
          schema: { type: string, format: date }
        - name: type
          in: query
          description: Transaction type.
          required: false
          schema:
            type: string
            enum: [debit, credit, transfer]
      responses:
        "200":
          description: Transactions list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"

  /transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get Transaction by ID
      description: Retrieve details of a specific transaction.
      operationId: getTransaction
      parameters:
        - $ref: "#/components/parameters/TransactionId"
      responses:
        "200":
          description: Transaction details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "404":
          description: Transaction not found.

  /transfers:
    post:
      tags: [Transfers]
      summary: Create Transfer
      description: Create a new fund transfer between two accounts.
      operationId: createTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferCreate"
            examples:
              default:
                value:
                  fromAccountId: acc_1001
                  toAccountId: acc_1002
                  amount: 500.0
                  description: Transfer description
      responses:
        "201":
          description: Transfer created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfer"

  /transfers/{id}/status:
    get:
      tags: [Transfers]
      summary: Get Transfer Status
      description: Check the current status of a transfer.
      operationId: getTransferStatus
      parameters:
        - $ref: "#/components/parameters/TransferId"
      responses:
        "200":
          description: Transfer status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferStatus"
        "404":
          description: Transfer not found.

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    AccountId:
      name: id
      in: path
      required: true
      description: Account ID
      schema: { type: string, example: acc_1001 }
    TransactionId:
      name: id
      in: path
      required: true
      description: Transaction ID
      schema: { type: string, example: txn_2001 }
    TransferId:
      name: id
      in: path
      required: true
      description: Transfer ID
      schema: { type: string, example: trf_3001 }

  schemas:
    Account:
      type: object
      properties:
        id: { type: string, example: acc_1001 }
        name: { type: string, example: "Checking" }
        currency: { type: string, example: "USD" }
        balance: { type: number, format: float, example: 1250.75 }
      required: [id, name, currency]
    AccountBalance:
      type: object
      properties:
        accountId: { type: string, example: acc_1001 }
        balance: { type: number, format: float, example: 1250.75 }
        currency: { type: string, example: "USD" }
      required: [accountId, balance, currency]
    Transaction:
      type: object
      properties:
        id: { type: string, example: txn_2001 }
        accountId: { type: string, example: acc_1001 }
        type: { type: string, enum: [debit, credit, transfer] }
        amount: { type: number, format: float, example: 42.5 }
        description: { type: string, example: "Coffee shop" }
        createdAt: { type: string, format: date-time }
      required: [id, accountId, type, amount, createdAt]
    TransferCreate:
      type: object
      properties:
        fromAccountId: { type: string, example: acc_1001 }
        toAccountId: { type: string, example: acc_1002 }
        amount: { type: number, format: float, example: 500.0 }
        description: { type: string, example: "Transfer description" }
      required: [fromAccountId, toAccountId, amount]
    Transfer:
      type: object
      properties:
        id: { type: string, example: trf_3001 }
        fromAccountId: { type: string, example: acc_1001 }
        toAccountId: { type: string, example: acc_1002 }
        amount: { type: number, format: float, example: 500.0 }
        status: { type: string, enum: [pending, succeeded, failed] }
        description: { type: string }
        createdAt: { type: string, format: date-time }
      required: [id, fromAccountId, toAccountId, amount, status]
    TransferStatus:
      type: object
      properties:
        id: { type: string, example: trf_3001 }
        status: { type: string, enum: [pending, succeeded, failed] }
      required: [id, status]
